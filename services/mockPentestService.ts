
import { PentestTargetInfo, PentestFinding, SecurityReport, PentestStatus } from '../types';

const MOCK_FINDINGS_DATABASE: Omit<PentestFinding, 'id'>[] = [
  { 
    severity: 'Critical', 
    title: 'SQL Injection Vulnerability', 
    description: 'User input is directly incorporated into SQL queries, allowing for potential database manipulation via the "username" parameter on the login page.', 
    cwe: 'CWE-89', 
    recommendation: 'Implement parameterized queries or prepared statements for all database interactions. Validate and sanitize all user inputs rigorously using an allow-list approach.',
    mockEvidence: "Log Snippet:\nMETHOD: POST /api/login\nPARAMS: { 'username': 'admin\\' OR '1'='1', 'password': 'password' }\nRESPONSE: 200 OK (User 'admin' logged in without valid password)",
    mockMitigationSteps: [
      "1. Review `authController.js` line 45: `const query = 'SELECT * FROM users WHERE username = \\'' + username + '\\' AND password = \\'' + password + '\\'';`",
      "2. Replace direct string concatenation with a parameterized query library function (e.g., `pg.query(text, values)`).",
      "3. Implement input validation to ensure `username` matches expected format (e.g., alphanumeric, specific length).",
      "4. Add server-side escaping for any dynamic parts of queries if parameterization is not fully possible (less ideal)."
    ]
  },
  { 
    severity: 'High', 
    title: 'Cross-Site Scripting (XSS) - Reflected', 
    description: 'User input from the "searchTerm" query parameter is reflected on the search results page without proper HTML sanitization, allowing execution of arbitrary JavaScript.', 
    cwe: 'CWE-79', 
    recommendation: 'Implement context-aware output encoding for all user-supplied data. Use a robust templating engine that handles escaping by default. Deploy a Content Security Policy (CSP) to restrict script sources.',
    mockEvidence: "URL: /search?searchTerm=<script>alert('XSS')</script>\nResult: Alert box with 'XSS' message appears on page load.",
    mockMitigationSteps: [
      "1. In `searchResults.template.html`, ensure `searchTerm` is HTML-escaped before rendering.",
      "2. Configure CSP header: `Content-Security-Policy: default-src 'self'; script-src 'self' trusted-scripts.com;`",
      "3. Validate `searchTerm` length and character set."
    ]
  },
  { 
    severity: 'Medium', 
    title: 'Outdated Server Software (Nginx 1.18.x)', 
    description: 'The web server version (Nginx 1.18.x) is outdated and may contain publicly known vulnerabilities (e.g., CVE-2021-23017).', 
    cwe: 'CWE-937', 
    recommendation: 'Update Nginx to the latest stable version. Regularly apply security patches and subscribe to security advisories for all server software.',
    mockEvidence: "Server Banner: Server: nginx/1.18.0\nPublic CVE Search: CVE-2021-23017 (DNS Resolver Off-by-one Write) affects Nginx < 1.20.1.",
    mockMitigationSteps: [
      "1. Schedule maintenance window for Nginx upgrade.",
      "2. Test upgrade in a staging environment.",
      "3. Follow official Nginx upgrade documentation.",
      "4. Implement automated patch management for server software."
    ]
  },
  { 
    severity: 'Low', 
    title: 'Missing Security Headers (X-Content-Type-Options)', 
    description: 'The X-Content-Type-Options header is not set to "nosniff", potentially leading to MIME-sniffing attacks where browsers misinterpret content types.', 
    cwe: 'CWE-693', 
    recommendation: 'Set X-Content-Type-Options header to "nosniff" in the web server configuration for all responses.',
    mockEvidence: "HTTP Response Header Check:\nX-Content-Type-Options: (missing)",
    mockMitigationSteps: [
      "1. Add `add_header X-Content-Type-Options \"nosniff\" always;` to Nginx config.",
      "2. Verify header presence using browser developer tools or `curl`."
    ]
  },
  { 
    severity: 'Informational', 
    title: 'Verbose Server Banners (PHP Version Exposed)', 
    description: 'The server exposes detailed PHP version information (e.g., X-Powered-By: PHP/7.4.3) in HTTP headers, which can aid attackers in identifying potential vulnerabilities.', 
    cwe: 'CWE-200', 
    recommendation: 'Configure PHP (php.ini `expose_php = Off`) and the web server to suppress verbose version information in banners and headers.',
    mockEvidence: "HTTP Response Header:\nX-Powered-By: PHP/7.4.3",
    mockMitigationSteps: [
      "1. Set `expose_php = Off` in `php.ini`.",
      "2. If using Nginx with FastCGI, ensure `fastcgi_hide_header X-Powered-By;` is set.",
      "3. Restart PHP-FPM and Nginx services."
    ]
  },
  { 
    severity: 'Medium', 
    title: 'Weak Password Policy on User Portal', 
    description: 'The user registration portal allows for passwords as short as 6 characters and does not enforce complexity (e.g., mix of uppercase, lowercase, numbers, symbols).', 
    cwe: 'CWE-521', 
    recommendation: 'Enforce strong password complexity requirements: minimum 12 characters, mix of character types. Implement account lockout after multiple failed attempts. Consider multi-factor authentication (MFA).',
    mockEvidence: "Test Case: Registered user 'testuser' with password 'abcdef'. Login successful.",
    mockMitigationSteps: [
      "1. Update password validation logic in `UserService.java`.",
      "2. Implement UI feedback for password requirements.",
      "3. Add rate limiting and account lockout features."
    ]
  },
  { 
    severity: 'High', 
    title: 'Insecure Direct Object References (IDOR) in /api/documents/{docId}', 
    description: 'The application uses sequential document IDs in the API. By incrementing `docId`, an authenticated user can access documents belonging to other users without authorization.', 
    cwe: 'CWE-639', 
    recommendation: 'Implement robust access control checks for all API endpoints retrieving objects. Verify that the authenticated user has permission to access the requested `docId`. Consider using UUIDs instead of sequential IDs for sensitive objects.',
    mockEvidence: "Request 1 (User A): GET /api/documents/101 (Success, User A's doc)\nRequest 2 (User A): GET /api/documents/102 (Success, User B's doc retrieved by User A)",
    mockMitigationSteps: [
      "1. Modify `DocumentController.java` method `getDocument(docId)`.",
      "2. Add a check: `if (!documentService.canUserAccessDocument(currentUser, docId)) { return 403_FORBIDDEN; }`.",
      "3. Evaluate replacing sequential IDs with UUIDs for `docId`."
    ]
  },
  { 
    severity: 'Critical', 
    title: 'Remote Code Execution (RCE) via Unsecured File Upload (profile_image)', 
    description: 'The profile image upload functionality does not properly validate file types or sanitize filenames. It allows uploading `.php` files which are then accessible via a predictable URL, leading to RCE.', 
    cwe: 'CWE-434', 
    recommendation: 'Strictly validate uploaded file types using an allow-list of extensions (e.g., jpg, png). Sanitize filenames to prevent directory traversal. Store uploaded files outside the webroot or in a non-executable location/bucket. Rename uploaded files to a random string.',
    mockEvidence: "1. Uploaded `shell.php` (containing `<?php system($_GET['cmd']); ?>`) as profile image.\n2. Accessed `/uploads/profile_images/shell.php?cmd=whoami`.\n3. Server responded with `www-data`.",
    mockMitigationSteps: [
      "1. Implement server-side validation for `$_FILES['profile_image']['type']` and extension in `upload_handler.php`.",
      "2. Store uploads in a directory not directly served by the web server (e.g., `/var/lib/uploads`).",
      "3. Generate random filenames for stored files and map them in the database.",
      "4. Consider using a virus scanner for uploaded files."
    ]
  },
];

export const generateMockSecurityReport = (targetInfo: PentestTargetInfo, productName: string): SecurityReport => {
  const numFindings = Math.floor(Math.random() * (MOCK_FINDINGS_DATABASE.length / 2)) + 2; // 2 to half of db size
  const findings: PentestFinding[] = [];
  const usedIndices = new Set<number>();

  for (let i = 0; i < numFindings; i++) {
    let dbIndex;
    do {
      dbIndex = Math.floor(Math.random() * MOCK_FINDINGS_DATABASE.length);
    } while (usedIndices.has(dbIndex));
    usedIndices.add(dbIndex);
    
    findings.push({
      id: `finding_${Date.now()}_${i}`,
      ...MOCK_FINDINGS_DATABASE[dbIndex],
    });
  }
  
  const severityScores: Record<PentestFinding['severity'], number> = {
    'Critical': 10, 'High': 7, 'Medium': 5, 'Low': 3, 'Informational': 1
  };
  const riskScores = findings.map(f => severityScores[f.severity] || 1);
  const overallRiskScore = findings.length > 0 ? parseFloat((riskScores.reduce((a,b) => a+b,0) / (findings.length * 10) * 10).toFixed(1)) : 0;


  return {
    reportId: `rep_${Date.now()}`,
    targetSummary: targetInfo ? { ...targetInfo } : { scopeNotes: "Target information was not available at report generation." },
    executiveSummary: `This simulated security assessment for ${productName} on target "${targetInfo?.targetUrl || targetInfo?.targetIp || 'N/A'}" utilized advanced (mocked) KI-driven techniques. The KI engine performed reconnaissance, vulnerability scanning, and (simulated) exploit verification. Key findings indicate several areas requiring attention to enhance the security posture. ${findings.length} vulnerabilities were identified, ranging from Informational to Critical. The KI continues to refine its methodologies based on global threat intelligence. Remediation of identified issues is highly recommended.`,
    findings: findings.sort((a,b) => (severityScores[b.severity] || 0) - (severityScores[a.severity] || 0)),
    overallRiskScore: overallRiskScore,
    generatedDate: new Date(),
    methodology: 'Simulated KI-Driven Black Box & Grey Box Testing, OWASP Top 10 (Mocked), CVE Database Cross-Referencing (Mocked), Simulated Manual Verification of Findings.',
  };
};

export const simulatePentestProcess = (
    updateStatusCallback: (status: PentestStatus) => void,
    delayPerStageMs: number = 1000
): Promise<void> => {
    return new Promise(resolve => {
        const stages: PentestStatus[] = [
            'Information Gathering',
            'Vulnerability Scanning',
            'Analysis & Reporting',
        ];
        let currentStageIndex = 0;

        const nextStage = () => {
            if (currentStageIndex < stages.length) {
                updateStatusCallback(stages[currentStageIndex]);
                currentStageIndex++;
                setTimeout(nextStage, delayPerStageMs);
            } else {
                resolve();
            }
        };
        setTimeout(nextStage, delayPerStageMs / 2); 
    });
};
